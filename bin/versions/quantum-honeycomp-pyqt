#!/usr/bin/python3
from __future__ import print_function
import sys
import os
import platform

  
# Add path of the interface
qhroot = os.path.dirname(os.path.realpath(__file__))+"/../../" 
sys.path.append(qhroot+"/interface-pyqt/system_selection") 
# Add path of the wrapper
sys.path.append(qhroot+"/pysrc/") # python libraries

from interfacetk import qtwrap # import the library with simple wrappers to pyqt
window = qtwrap.main() # this is the main interface



def get_command(name="python"):
  """Return the path for Anaconda Python, which has pyqt by default"""
  dirname = os.path.dirname(os.path.realpath(__file__))
  sys.path.append(dirname+"/../../pysrc/interpreter") # add this path
  import pycommand
  return pycommand.get_python()



python = get_command() # Python command


def call_mode(mode,folder=None,pyqt=False):
  """ Returns a function which calls a particular quantum honeycomp mode"""
  if folder is None: folder = mode # if not provided
  path = qhroot
  def launch(self):
    """Function to launch a particular calculation, passes qhroot as input"""
    os.system(python+" "+path+"interface-pyqt/"+mode+"/"+mode+".py   "+path +"  &")
  return launch



# create signals
signals = dict()
signals["sheets"] = call_mode("2d",pyqt=True)   
signals["heterostructure"] = call_mode("hybridfilm",pyqt=True)   
signals["twisted_bilayer"] = call_mode("tbg",pyqt=True)  
signals["ribbons_pyqt"] = call_mode("1d",pyqt=True)  
signals["islands_pyqt"] = call_mode("0d",pyqt=True)  
signals["film2d_pyqt"] = call_mode("2dslab",pyqt=True)  
signals["hybridribbon_pyqt"] = call_mode("hybridribbon",pyqt=True)  
signals["hofstader_pyqt"] = call_mode("hofstader1d",pyqt=True)  
signals["crystal3d_pyqt"] = call_mode("3d",pyqt=True)  
signals["huge0d_pyqt"] = call_mode("huge_0d",pyqt=True)  
signals["multilayergraphene"] = call_mode("multilayergraphene",pyqt=True)  



def update_qh():
    os.chdir(qhroot) # go to the main directory
    os.system("git pull") # pull the directory
    exit()


signals["update_qh"] = update_qh # update Quantum Honeycomp 


# set the quantum honeycomp logo
qtwrap.set_logo("qhlogo","quantum_honeycomp.png")

# Set the version number
version = open(os.environ["QHROOT"]+"/VERSION.TXT").read().replace("\n","")
version = "Version "+version.replace(" ",".")
qtwrap.modify("qh_version",version) # set the version number

window.connect_clicks(signals) # connect the clicks
window.run()

